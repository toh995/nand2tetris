// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
  static int n;             // Number of bits used for representing a two's complement integer
  static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

  // Initializes the Math library.
  function void init() {
    var int i;
    let n = 16;
    let powersOfTwo = Array.new(n);
    let powersOfTwo[0] = 1;
    let i = 1;
    while (i < n) {
      let powersOfTwo[i] = powersOfTwo[i-1] + powersOfTwo[i-1];
      let i = i + 1;
    }
    return;
  }

  /** Returns the product of x and y. 
   *  When a Jack compiler detects the multiplication operator '*'
   *  in an expression, it handles it by invoking this method. 
   *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
  function int multiply(int x, int y) {
    var int ret, shiftedX, i;
    let ret = 0;
    let shiftedX = x;
    let i = 0;
    while (i < 16) {
      if (Math._bit(y, i)) {
        let ret = ret + shiftedX;
      }
      let shiftedX = shiftedX + shiftedX;
      let i = i + 1;
    }
    return ret;
  }

  /** Returns true if the i-th bit of x is 1, false otherwise */
  function boolean _bit(int x, int i) {
    return (x & powersOfTwo[i]) = powersOfTwo[i];
  }

  /** Returns the integer part of x / y.
   *  When a Jack compiler detects the division operator '/'
   *  an an expression, it handles it by invoking this method.
   *  Thus, x/y and Math.divide(x,y) return the same value. */
  function int divide(int x, int y) {
    var int negCount, ret;
    if (y = 0) {
      do Sys.error(3);
    }
    let negCount = 0;
    if (x < 0) {
      let negCount = negCount + 1;
    }
    if (y < 0) {
      let negCount = negCount + 1;
    }
    let x = Math.abs(x);
    let y = Math.abs(y);
    let ret = Math._divide(x, y);
    if (negCount = 1) {
      return -ret;
    }
    return ret;
  }

  /** Private version of divide. Assume that all arguments are positive! */
  function int _divide(int x, int y) {
    var int q, r;
    if (x < y | y < 0) {
      return 0;
    }
    let q = Math._divide(x, 2*y);
    let r = x - (2*q*y);
    if (r < y) {
      return 2*q;
    }
    return (2*q) + 1;
  }

  /** Returns the integer part of the square root of x. */
  function int sqrt(int x) {
    // Find an integer y such that y^2 <= x < (y+1)^2.
    // The max val for y is 2^(n/2) - 1.
    var int y, i, tmp, tmpSquared;
    if (x < 0) {
      do Sys.error(4);
    }
    let y = 0;
    let i = (n/2) - 1;
    while (i > -1) {
      let tmp = y + powersOfTwo[i];
      let tmpSquared = tmp * tmp;
      if (
        ((tmpSquared = x) | (tmpSquared < x))
          & (tmpSquared > 0)
      ) {
         let y = tmp;
      }
      let i = i - 1;
    }
    return y;
  }

  /** Returns the greater value. */
  function int max(int a, int b) {
    if (a > b) {
      return a;
    }
    return b;
  }

  /** Returns the smaller value. */
  function int min(int a, int b) {
    if (a < b) {
      return a;
    }
    return b;
  }

  /** Returns the absolute value of x. */
  function int abs(int x) {
    if (x < 0) {
      return -x;
    }
    return x;
  }
}
