function Screen.init 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 16384
pop static 1
push constant 8192
pop static 2
push constant 511
pop static 3
push constant 255
pop static 4
call Screen._initPowersOfTwo 0
pop temp 0
push constant 0
return
function Screen._initPowersOfTwo 2
push constant 16
pop local 0
push local 0
call Array.new 1
pop static 5
push constant 0
push static 5
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 1
label WHILE_EXP0
push local 1
push local 0
lt
not
if-goto WHILE_END0
push local 1
push static 5
add
push local 1
push constant 1
sub
push static 5
add
pop pointer 1
push that 0
push local 1
push constant 1
sub
push static 5
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.clearScreen 2
push static 1
pop local 0
push static 1
push static 2
add
pop local 1
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push local 0
push constant 0
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 3
push argument 0
push argument 1
call Screen._isIllegalCoord 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 7
call Sys.error 1
pop temp 0
label IF_FALSE0
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
push static 1
add
pop local 0
push local 0
call Memory.peek 1
pop local 2
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 1
push local 2
push local 1
push static 0
call Screen._setBit 3
pop local 2
push local 0
push local 2
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 11
push argument 0
push argument 1
call Screen._isIllegalCoord 2
push argument 2
push argument 3
call Screen._isIllegalCoord 2
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 8
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
push argument 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push argument 3
call Math.min 2
pop local 0
push argument 1
push argument 3
call Math.max 2
push constant 1
add
pop local 1
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push argument 0
push local 0
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
label IF_FALSE1
push argument 1
push argument 3
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 0
push argument 2
call Math.min 2
pop local 2
push argument 0
push argument 2
call Math.max 2
push constant 1
add
pop local 3
label WHILE_EXP1
push local 2
push local 3
lt
not
if-goto WHILE_END1
push local 2
push argument 1
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
label IF_FALSE2
push argument 0
push argument 2
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 0
pop local 10
push argument 2
pop argument 0
push local 10
pop argument 2
push argument 1
pop local 10
push argument 3
pop argument 1
push local 10
pop argument 3
label IF_FALSE3
push constant 0
pop local 4
push constant 0
pop local 5
push argument 2
push argument 0
sub
pop local 7
push argument 3
push argument 1
sub
pop local 8
push constant 0
pop local 6
push local 8
push constant 0
lt
pop local 9
push local 8
call Math.abs 1
pop local 8
label WHILE_EXP2
push local 4
push local 7
push constant 1
add
lt
push local 5
push local 8
push constant 1
add
lt
and
not
if-goto WHILE_END2
push local 9
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 0
push local 4
add
push argument 1
push local 5
sub
call Screen.drawPixel 2
pop temp 0
goto IF_END4
label IF_FALSE4
push argument 0
push local 4
add
push argument 1
push local 5
add
call Screen.drawPixel 2
pop temp 0
label IF_END4
push local 6
push constant 0
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 4
push constant 1
add
pop local 4
push local 6
push local 8
add
pop local 6
goto IF_END5
label IF_FALSE5
push local 5
push constant 1
add
pop local 5
push local 6
push local 7
sub
pop local 6
label IF_END5
goto WHILE_EXP2
label WHILE_END2
push constant 0
return
function Screen.drawRectangle 3
push argument 0
push argument 2
lt
push argument 1
push argument 3
lt
and
push argument 0
push argument 1
call Screen._isLegalCoord 2
and
push argument 2
push argument 3
call Screen._isLegalCoord 2
and
pop local 0
push local 0
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 9
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 1
pop local 1
push argument 3
push constant 1
add
pop local 2
label WHILE_EXP0
push local 1
push local 2
lt
not
if-goto WHILE_END0
push argument 0
push local 1
push argument 2
push local 1
call Screen.drawLine 4
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 2
push argument 0
push argument 1
call Screen._isIllegalCoord 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 12
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 2
push constant 0
lt
push argument 2
push constant 181
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 13
call Sys.error 1
pop temp 0
label IF_FALSE1
push argument 2
neg
pop local 0
label WHILE_EXP0
push local 0
push argument 2
push constant 1
add
lt
not
if-goto WHILE_END0
push argument 2
push argument 2
call Math.multiply 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 1
push argument 0
push local 1
sub
push argument 1
push local 0
add
push argument 0
push local 1
add
push argument 1
push local 0
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen._setBit 0
push argument 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push static 5
add
pop pointer 1
push that 0
push argument 0
or
return
label IF_FALSE0
push argument 1
push static 5
add
pop pointer 1
push that 0
not
push argument 0
and
return
function Screen._isLegalCoord 0
push argument 0
push argument 1
call Screen._isIllegalCoord 2
not
return
function Screen._isIllegalCoord 0
push argument 0
push static 3
gt
push argument 0
push constant 0
lt
or
push argument 1
push static 4
gt
or
push argument 1
push constant 0
lt
or
return
