// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
  static boolean color;
  static int baseScreenAddr;
  static int numScreenRegisters;
  static int xMax, yMax;
  static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

  /** Initializes the Screen. */
  function void init() {
    do Screen.setColor(true);
    let baseScreenAddr = 16384;
    let numScreenRegisters = 8192;
    let xMax = 511;
    let yMax = 255;
    do Screen._initPowersOfTwo();
    return;
  }

  function void _initPowersOfTwo() {
    var int wordSize, i;
    let wordSize = 16;
    let powersOfTwo = Array.new(wordSize);
    let powersOfTwo[0] = 1;
    let i = 1;
    while (i < wordSize) {
      let powersOfTwo[i] = powersOfTwo[i-1] + powersOfTwo[i-1];
      let i = i + 1;
    }
    return;
  }

  /** Erases the entire screen. */
  function void clearScreen() {
    var int addr, stopAddr;
    let addr = baseScreenAddr;
    let stopAddr = baseScreenAddr + numScreenRegisters;
    while (addr < stopAddr) {
      do Memory.poke(addr, 0);
      let addr = addr + 1;
    }
    return;
  }

  /** Sets the current color, to be used for all subsequent drawXXX commands.
   *  Black is represented by true, white by false. */
  function void setColor(boolean b) {
    let color = b;
    return;
  }

  /** Draws the (x,y) pixel, using the current color. */
  function void drawPixel(int x, int y) {
    var int addr, i, ramVal;
    if (Screen._isIllegalCoord(x, y)) {
      do Sys.error(7);
    }
    let addr = (32*y) + (x/16) + baseScreenAddr;
    let ramVal = Memory.peek(addr);
    let i = x - ((x/16)*16);
    let ramVal = Screen._setBit(ramVal, i, color);
    do Memory.poke(addr, ramVal);
    return;
  }

  /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
  function void drawLine(int x1, int y1, int x2, int y2) {
    var int y, yStop;
    var int x, xStop;
    var int a, b, diff;
    var int dx, dy;
    var boolean isSlopeNegative;
    var int tmp;
    if (Screen._isIllegalCoord(x1, y1) | Screen._isIllegalCoord(x2, y2)) {
      do Sys.error(8);
    }
    if (x1 = x2) {
      let y = Math.min(y1, y2);
      let yStop = Math.max(y1, y2) + 1;
      while (y < yStop) {
        do Screen.drawPixel(x1, y);
        let y = y + 1;
      }
      return;
    }
    if (y1 = y2) {
      let x = Math.min(x1, x2);
      let xStop = Math.max(x1, x2) + 1;
      while (x < xStop) {
        do Screen.drawPixel(x, y1);
        let x = x + 1;
      }
      return;
    }
    // Normalize, such that x1 <= x2
    if (x1 > x2) {
      let tmp = x1;
      let x1 = x2;
      let x2 = tmp;
      let tmp = y1;
      let y1 = y2;
      let y2 = tmp;
    }
    let a = 0;
    let b = 0;
    let dx = x2 - x1;
    let dy = y2 - y1;
    let diff = 0;
    let isSlopeNegative = dy < 0;
    let dy = Math.abs(dy);
    while (
      (a < (dx + 1)) & (b < (dy + 1))
    ) {
      if (isSlopeNegative) {
        do Screen.drawPixel(x1+a, y1-b);
      } else {
        do Screen.drawPixel(x1+a, y1+b);
      }
      if (diff < 0) {
        let a = a + 1;
        let diff = diff + dy;
      } else {
        let b = b + 1;
        let diff = diff - dx;
      }
    }
    return;
  }

  /** Draws a filled rectangle whose top left corner is (x1, y1)
   *  and bottom right corner is (x2,y2), using the current color. */
  function void drawRectangle(int x1, int y1, int x2, int y2) {
    var boolean isValidRectangle;
    var int y, yStop;
    let isValidRectangle = (x1 < x2) & (y1 < y2)
      & Screen._isLegalCoord(x1, y1)
      & Screen._isLegalCoord(x2, y2);
    if (~isValidRectangle) {
      do Sys.error(9);
    }
    let y = y1;
    let yStop = y2 + 1;
    while (y < yStop) {
      do Screen.drawLine(x1, y, x2, y);
      let y = y + 1;
    }
    return;
  }

  /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
  function void drawCircle(int x, int y, int r) {
    var int dy, dx;
    if (Screen._isIllegalCoord(x, y)) { do Sys.error(12); }
    if ((r < 0) | (r > 181))          { do Sys.error(13); }
    let dy = -r;
    while (dy < (r+1)) {
      let dx = Math.sqrt((r*r) - (dy*dy));
      do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);
      let dy = dy + 1;
    }
    return;
  }

  /** Set the i-th bit in word to the specified color.
   *  If color == true, set the i-th bit to 1.
   *  Otherwise, set the i-th bit to 0. */
  function int _setBit(int word, int i, boolean color) {
    if (color) {
      return powersOfTwo[i] | word;
    }
    return ~powersOfTwo[i] & word;
  }

  function boolean _isLegalCoord(int x, int y) {
    return ~Screen._isIllegalCoord(x, y);
  }

  function boolean _isIllegalCoord(int x, int y) {
    return (x > xMax) | (x < 0) | (y > yMax) | (y < 0);
  }
}
