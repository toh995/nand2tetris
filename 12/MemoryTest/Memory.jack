// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
  static Array ram;
  static Array freeList;

  /** Initializes the class. */
  function void init() {
    // Sets the "base address" of the array to 0.
    // Then, ram[i] gives us the i-th register value.
    // This is a HACK that is unique to the jack language.
    let ram = 0;
    // Set up freeList
    let freeList = 2048;
    let freeList[0] = 0;
    let freeList[1] = 14334;
    return;
  }

  /** Returns the RAM value at the given address. */
  function int peek(int address) {
    return ram[address];
  }

  /** Sets the RAM value at the given address to the given value. */
  function void poke(int address, int value) {
    let ram[address] = value;
    return;
  }

  /** Finds an available RAM block of the given size and returns
   *  a reference to its base address. */
  function int alloc(int size) {
    // Use the "first-fit" algo
    var Array retNode, currNode, prevNode, newNode;
    if (size < 1) {
      do Sys.error(5);
    }
    if (freeList = 0) {
      do Sys.error(6);
    }
    if (freeList[1] = size) {
      let retNode = freeList;
      let freeList = retNode[0];
      let retNode[0] = 0;
      return retNode + 2;
    }
    if (freeList[1] > size + 2) {
      let retNode = freeList;
      let newNode = retNode + size + 2;
      let newNode[0] = retNode[0];
      let newNode[1] = retNode[1] - size - 2;
      let freeList = newNode;
      let retNode[0] = 0;
      let retNode[1] = size;
      return retNode + 2;
    }
    // Traverse freeList, finding the first available memory block.
    let currNode = freeList;
    while (true) {
      let prevNode = currNode;
      let currNode = currNode[0];
      if (currNode = 0) {
        do Sys.error(6);
      }
      if (currNode[1] = size) {
        let prevNode[0] = currNode[0];
        let currNode[0] = 0;
        return currNode + 2;
      }
      if (currNode[1] > size + 2) {
        let newNode = currNode + size + 2;
        let newNode[0] = currNode[0];
        let newNode[1] = currNode[1] - size - 2;
        let prevNode[0] = newNode;
        let currNode[0] = 0;
        let currNode[1] = size;
        return currNode + 2;
      }
    }
    return 0;
  }

  /** De-allocates the given object (cast as an array) by making
   *  it available for future allocations. */
  function void deAlloc(Array o) {
    let o = o - 2;
    let o[0] = freeList;
    let freeList = o;
    return;
  }    
}
