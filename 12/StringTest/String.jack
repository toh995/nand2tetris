// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
  field Array str;
  field int length, maxLength;

  /** constructs a new empty string with a maximum length of maxLength
   *  and initial length of 0. */
  constructor String new(int maxLen) {
    if (maxLen < 0) {
      do Sys.error(14);
    }
    let length = 0;
    if (maxLen > 0) {
      let str = Array.new(maxLen);
    }
    return this;
  }

  /** Disposes this string. */
  method void dispose() {
    if (maxLength > 0) {
      do str.dispose();
    }
    do Memory.deAlloc(this);
    return;
  }

  /** Returns the current length of this string. */
  method int length() {
    return length;
  }

  /** Returns the character at the j-th location of this string. */
  method char charAt(int j) {
    if (j > (length - 1)) { do Sys.error(15); }
    return str[j];
  }

  /** Sets the character at the j-th location of this string to c. */
  method void setCharAt(int j, char c) {
    if (j > (length - 1)) { do Sys.error(16); }
    let str[j] = c;
    return;
  }

  /** Appends c to this string's end and returns this string. */
  method String appendChar(char c) {
    if (length = maxLength) { do Sys.error(17); }
    let str[length] = c;
    let length = length + 1;
    return this;
  }

  /** Erases the last character from this string. */
  method void eraseLastChar() {
    if (length = 0) { do Sys.error(18); }
    let length = length - 1;
    return;
  }

  /** Returns the integer value of this string, 
   *  until a non-digit character is detected. */
  method int intValue() {
    var bool isNegative;
    var int ret, i, d;
    let ret = 0;
    let i = 0;
    let isNegative = str[0] = String._hyphen();
    if (isNegative) {
      let i = 1;
    }
    while (i < length) {
      let d = String._charToDigit(str[i]);
      let ret = (ret * 10) + d;
      let i = i + 1;
    }
    if (isNegative) {
      return -ret;
    }
    return ret;
  }

  /** Sets this string to hold a representation of the given value. */
  method void setInt(int val) {
    var bool isNegative;
    var int lastDigit;
    var char c;
    let length = 0;
    let isNegative = val < 0;
    let val = Math.abs(val);
    while (val > 0) {
      let lastDigit = val - ((val / 10) * 10);
      let c = String._digitToChar(lastDigit);
      do appendChar(c);
      let val = val / 10;
    }
    if (isNegative) {
      do appendChar(String._hyphen());
    }
    do _reverse();
    return;
  }

  /** Returns the new line character. */
  function char newLine() {
    return 128;
  }

  /** Returns the backspace character. */
  function char backSpace() {
    return 129;
  }

  /** Returns the double quote (") character. */
  function char doubleQuote() {
    return 34;
  }

  /** PRIVATE METHODS */
  function int _charToDigit(char c) {
    return c - 48;
  }

  function char _digitToChar(int d) {
    return d + 48;
  }

  function char _hyphen() {
    return 45;
  }

  /** Reverse the string in-place. */
  method void _reverse() {
    var int i, j;
    var char tmp;
    let i = 0;
    let j = length - 1;
    while (i < j) {
      let tmp = str[i];
      let str[i] = str[j];
      let str[j] = tmp;
      let i = i + 1;
      let j = j - 1;
    }
    return;
  }
}
