// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Check whether to write to RAM or screen
    DMux(sel=address[14], in=load, a=loadRam, b=maybeScreen);
    Mux(sel=address[13], a=maybeScreen, b=false, out=loadScreen);
    
    // Connect to the main components
    RAM16K(in=in, load=loadRam, address=address[0..13], out=ramOut);
    Screen(in=in, load=loadScreen, address=address[0..12], out=screenOut);
    Keyboard(out=kbdOut);
    
    // Determine the final output value
    Mux16(sel=address[14], a=ramOut, b=out1, out=out);
    Mux16(sel=address[13], a=screenOut, b=out2, out=out1);
    Mux16(sel=useKbd, a=false, b=kbdOut, out=out2);
    
    // Calculate `useKbd`.
    // Set useKbd = 1, if BOTH:
    //  - address[13..14] == true
    //  - address[0..12] == false
    
    // Check address[13..14] == true
    And(a=address[13], b=address[14], out=lastTrue);

    // Check address[0..12] == false
    Or8Way(in=address[0..7], out=hasTrue1);
    Or8Way(in[0..4]=address[8..12], in[5..7]=false, out=hasTrue2);
    Or(a=hasTrue1, b=hasTrue2, out=hasTrue);
    Not(in=hasTrue, out=allFalse);
    
    // Final check for useKbd
    And(a=lastTrue, b=allFalse, out=useKbd);
}
