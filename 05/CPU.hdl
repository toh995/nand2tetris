// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAInstruction);
    
    // ARegister
    Mux16(sel=instruction[15], a=instruction, b=aluOut, out=aNew);
    ARegister(in=aNew, load=loadA, out=aPrev, out[0..14]=addressM);
    Or(a=isAInstruction, b=instruction[5], out=loadA);

    // DRegister
    DRegister(in=aluOut, load=loadD, out=dPrev);
    And(a=instruction[15], b=instruction[4], out=loadD);

    // ALU
    ALU(x=dPrev, y=aluY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOut, zr=eq, ng=lt);
    // figure out the `y` value for ALU
    Mux16(sel=instruction[12], a=aPrev, b=inM, out=aluY);

    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    // PC
    PC(in=aPrev, inc=true, load=loadPC, reset=reset, out[0..14]=pc);
    // Compute `loadPC`
    And(a=instruction[15], b=j123, out=loadPC);
    Or(a=j1, b=j23, out=j123);
    Or(a=j2, b=j3, out=j23);
    // compute j1, j2, and j3
    And(a=instruction[2], b=lt, out=j1);
    And(a=instruction[1], b=eq, out=j2);
    And(a=instruction[0], b=gt, out=j3);
    // compute gt
    Not(in=lte, out=gt);
    Or(a=lt, b=eq, out=lte);
}

